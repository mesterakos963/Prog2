<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Berner-Lee!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Java és C++ összehasonlítás </title>
        <para> A Java nyelv teljesen objektumorientált. Egy osztály két dologból tevődik össze:
            mezők(adatok tárolása), metódusok(adatokon végezhető műveletek kódja.</para>
        <para>Futtatáshoz szükségünk van egy Java nevű fordítóprogramra. Ez egy bájtkódnak nevezett
            formátumra fordítja le a forráskódot, amelyet majd a Java Virtuális Gép önálló
            interpreterként fog értelmezni. Ez lassabb futást eredményez. A legnagyobb különbség a
            Java illetve a C++ között itt mutatkozik. A C++ kézenfekvőbb, ha olyan programokat
            szeretnénk írni, amelyeknél a futás sebessége elsődleges szempont. A Java inkább a
            web-es téren elterjedt.</para>
        <para>A Java nyelvnek vannak egyszerű típusai is, melyeket az adatok egyszerű
            reprezentálására lehet használni. Ezeknek értéket adni az '=' operátorral lehet.
            Ilyenkor ez valódi értékadást jelent, összetett típusok esetében csak egy referencia
            átmásolását jelenti.</para>
        <para>Eltérés még a C++ és a Java között, hogy Java-ban már 16 bites Unicode karaktereket is
            lehet használni változók vagy konstansok deklarálásához, tehát használhatunk ékezetes
            karaktereket, görög ábécé betűit, stb.</para>
        <para>Megjegyzéseket ugyanúgy adhatunk hozzá a kódhoz, mint a C++ esetében.</para>
        <para>A Java nyelveben semmilyen explicit eszköz nincs egy objektum megszüntetésére,
            egyszerűen nem kell hivatkozni rá és magától meg fog szűnni. Hivatkozás megszüntetéséhez
            az eddigi referencia helyett a null referenciát adjuk neki értékül.</para>
        <para>A Java nyelvben tömböket a [] jelöléssel lehet megadni. A C++-tól eltérően ez egy
            igazi típus lesz és nem csak a mutató típus egy másik megjelenítési formája. A tömb
            típusok nem primitív típusok, a tömb típusú változók objektumhivatkozást tartalmaznak.
            Eltérés még a C++ és a Java között, hogy a Java-ban nincsenek többdimenziós tömbök, erre
            a tömb a tömbben megoldást használja.</para>
        <para>További eltérés még a Goto utasítás teljes hiánya, ez a Java nyelvből kimaradt. </para>
        <para>Java-ban egy objektumot a következő képen példányosítunk. </para>
        <programlisting language="c++"><![CDATA[
#Adott egy objektum
public class Alkalmazott {
String nev; int fiztes;
void fizetesemeles (int novekmeny) {
    fizetes += novekmeny
    }
}
#Példányosítás
Alkalmazott a = new Alkalmazott();
]]></programlisting>
        <para>A new operátor mögött adjuk meg, h melyik osztályt példányosítjuk. A zárójelek közék
            közé az adott esetben a konstruktornak szánt paramétereket írjuk. Csakúgy, mint a
            C++-ban, itt is vannak nyilvános (public) és privát (private) tagok. A private tagokhoz
            az adott osztályon kívül nem férhet hozzá semmi.</para>
        <para>Java megkülönbözteti a referenciát és az imperatív programozási nyelvekben használt
            mutatót aképpen, hogy a kifejezésekben automatikusan a mutatott objektumot jelenti, nem
            pedig a címet.</para>
        <para>Az öröklődés legegyszerűbb esete, amikor egy létező osztályt egy másik osztállyal
            bővítünk ki. Ez jelentheti új műveletek vagy változók bevezetését. A már létező osztály
            lesz a szülő osztály, amivel kibővítettük pedig a gyermek. A gyermek a benne megadott
            tagokok kívül a szülő tagjaival is rendelkezni fog. Ezt nevezzük öröklődésnek. Azonban a
            gyermek csak azokhoz a tagokhoz fér hozzá, amelyikhez a szülő engedi, viszont a gyermek
            példányai rendelkeznek a szülő összes tagjával.</para>
        <para>Mivel a gyermek őseinek minden változójával és metódusával a bír, minden olyan
            környezetben használható, ahol ősei használhatók. Ezt nevezzül polimorfizmusnak.</para>
        <para>Az osztályok rokonsági viszonyainak összességét osztályhierarchiának hívjuk. Az Object
            osztályból származtatva fentről lefelé növő fa ként lehet elképzelni.</para>
        <para>Absztrakt osztályok - megvalósítás(törzs) nélküli metódusokat megvalósító osztályok. A
            Java nyelvben az abstract módosító jelöli az absztrakt osztályokat valamint metódusokat.
            Ezek az osztályok nem példányosíthatók, nem lehet private, final, static vagy native
            módosítóval ellátottak.</para>
        <para>Final módosító - megakadályozza az előtaggal ellátott osztály
            felüldefiniálását.</para>
        <para>Interfészeknek az olyan osztályokat nevezzük, amelyek tartalmazhatnak absztrakt (törzs
            nélküli) függvényeket. Az interfészek, mint egy külső felület engedik, hogy belőlük
            származtatott osztályokból példányosított objektumokat egységesen kezeljük. Szintén
            abstract kulcsszóval adjuk meg az absztrakt metódusokat. Az absztrakt osztályokat
            példányosítani nem lehet. Helyette azt mondjuk, hogy megvalósít vagy implementál egy
            absztrakt metódust, ha szülőjének egy absztrakt metódusát felüldefiniálja, azaz más
            implementációt ad rá.</para>
        <para>Az UML az egyetlen szabványos modellező nyelve az általános szoftverfejlesztésnek.
            Leggyakoribb felhasználási területe az UML osztálydiagram. Nagyon jól szemlélteti a
            programban található osztályokat, interfészeket és egyéb típusokat és köztük fennálló
            kapcsolatot.</para>
        <para> A java programok forráskódjában tetszőleges unicode karakterek használhatóak, mivel
            ez több biten tárolja a karaktereket, mint például az ASCII és az EBCDIC, amelyek 8
            biten tárolják őket. Ezeket használva nem lehetne alkalmazni a magyar ű és ő betűket.
            Megfelelő alternatíva lehetne még a Latin-2 karakterkészlet, azonban az unicode sokkal
            célszerűbb.</para>
        <para>Tokenek -  lexikális egységek, amelyekből utasítások és kifejezések állíthatók
            össze.</para>
        <para>Tokenek lehetnek:<itemizedlist>
                <listitem>
                    <para>fehér-karakterek</para>
                </listitem>
                <listitem>
                    <para>azonosítók - betűvel kezdődnek és betűvel vagy számmal
                        folytatódnak;</para>
                </listitem>
                <listitem>
                    <para>operátorok - szimbólumok, amelyek értékeken végeznek műveletet;</para>
                </listitem>
                <listitem>
                    <para>literálok - egyszerű típusok inicializálásához használatosak;</para>
                </listitem>
                <listitem>
                    <para>kulcsszavak - a rendszer által lefoglalt szavak, azonosítók nem
                        lehetnek;</para>
                </listitem>
                <listitem>
                    <para>punctuatorok (C++ esetén).</para>
                </listitem>
            </itemizedlist></para>
        <para>Utasítás lehet:<itemizedlist>
                <listitem>
                    <para>deklaráció-utasítás - lokális változó létrehozását és tetszés szerinti
                        inicializálást jelent;</para>
                </listitem>
                <listitem>
                    <para>kifejezés-utasítás - ez lehet értékadás, metódushívás, ++ vagy --
                        operátorokkal képzett kifejezések, példányosítás.</para>
                </listitem>
            </itemizedlist></para>
        <para>Közös bennük, hogy pontosvessző zárja le őket. Tetszés szerint válthatják
            egymást.</para>
        <para>Java-ban jelentős az eltérés primitív típusú változók és egyéb változók között. A nem
            primitív változók objektumhivatkozásokat tartalmaznak, osztályként kell rájuk
            tekinteni.</para>
        <para>Java nyelv primitív típusai:<itemizedlist>
                <listitem>
                    <para>byte</para>
                </listitem>
                <listitem>
                    <para>short</para>
                </listitem>
                <listitem>
                    <para>int</para>
                </listitem>
                <listitem>
                    <para>boolean</para>
                </listitem>
                <listitem>
                    <para>char</para>
                </listitem>
                <listitem>
                    <para>long</para>
                </listitem>
                <listitem>
                    <para>float</para>
                </listitem>
                <listitem>
                    <para>double</para>
                </listitem>
            </itemizedlist></para>
        <para>Konstans változó -  bármilyen típus lehet, létrehozáskor kezdőértékkel kell ellátni.
            Egy fordítási egységen belül szabadon hivatkozhatunk más változókra. Ha nincs körkörös
            hivatkozás, akkor a fordító biztosítja a helyes sorrendet.</para>
        <para>Minden osztálynak van konstruktora, amik példányosítás során hajtódnak végre
            automatikusan. Neve megegyezik az osztály nevével. Ez a metódus adja meg az objektum
            kezdeti állapotát. A destruktor a konstruktor ellentéte. Az erőforrások
            felszabadításához van rá szükség.</para>
        <para>Operátor túlterhelés - az operátorok segítségével műveleteket lehet végezni az
            egyszerű változókon. Ezeket az osztályok túl tudják tehelni, így saját működést
            társítanak hozzá.</para>
        <para>Indexer (indexelő) - ezek segítségével úgy indexelhetünk osztályokat, mint
            tömböket.</para>
        <para>Beágyazott osztályok - két osztály között lévő szoros kapcsolat kifejezésére
            használjuk őket. Egy osztályt megadhatunk egy másik osztályon belül (beágyazás). A
            beágyazott osztály a tartalmazó osztályon kívül nem létezhet.</para>
        <para>Gyűjtemények - olyan eszközök, amelyek egy vagy több típusba tartozó objektumok
            példányait a memóriában tárolja, manipulálja vagy lekérdezi. Ezek minden
            programnyelveben megtalálhatóak (van néhány kivétel). Legjellemzőbb fajtája a tömb és az
            objektum referenciák vagy mutatók segítségével történő összekapcsolás. Java 2-vel került
            be a nyelvbe.</para>
        <para>Funkcionális nyelvek - dekleratív nyelvek, a program végrehajtását egy függvény
            kiértékelésének tekinti. Egy kezdetleges funkcionális nyelv esetén nem lehet változókról
            sem értékadásról beszélni. A függvénye csupán a bemeneti értékek alapján számítják ki a
            megfelelő kimenetet.</para>
        <para>Lambda kifejezés - az imperatív nyelvekbe átemelt legnépszerűbb funkcionális elem.
            Lehetőséget ad inline függvények létrehozására. Rövid kódrészletek, általában
            "egyszerhasználatosakt", tehát nincs értelme elnevezni őket. Ott írjuk meg őket, ahol
            használni szeretnénk. </para>
        <para>Java-ban minden adatfolyam típusnak egy osztály fog megfeleni.</para>
        <para>Három féle képen lehet osztályozni őket:<itemizedlist>
                <listitem>
                    <para>adatfolyam típusa alapján - bájtfolyam, karakterfolyam;</para>
                </listitem>
                <listitem>
                    <para>adatfolyam iránya alapján - bemeneti és kimeneti;</para>
                </listitem>
                <listitem>
                    <para>feladatuk alapján - adatfolyam forrása valamint meglévő adatot
                        kiegészítő.</para>
                </listitem>
            </itemizedlist></para>
        <para>A fájlok manipulásához Java-ban nem az adatfolyamok alkalmatlanok sok esetben, mivel
            nincs biztosítva egyidőben a fájlok olvasása és írása. A probléma megoldásáoz egy
            közvetlen elérésű fáj (random acces file) segít. Legkönnyebben egy fájlrendszerben
            tárolt bájttömbként képzelhető el, amelynek bármelyik pozíciójához olvashatunk és
            írhatunk adatot. Minden ilyen objektumhoz tartozk egy fájlmutató. Ez egy pozíciót jelöl
            a fájlban. Ettől a mutatótól kezdődnek a kiíró és beolvasó műveletek.</para>
        <para>Szerializáció - az objektumok byte-sorozattá alakítását jelenti. Az adatok külső
            tárolásában játszik fontos szerepet. Csak az az osztály szerilizálható, amelyik
            megvalósítja a serilizable interfészt. Ha egy szerializálható, akkor a leszármazottai
            is. </para>
        <para>Kivételkezelés - mechanizmus, amely biztosítja, hogy hiba esetén a futás a hibakezelő
            ágon folytatódjon. Bármilyen kivételes helyzet esetén használható.</para>
        <para>Java exception - olyan kivételes esemény, amely hatására az utasítások normál
            végrehajtási sorrendje megszakad. A Java kivételkezelés - ahogy minden más is -
            osztályokon alapszik. Amikor egy kivétel keletkezik egy metódus futása közben, akkor egy
            hiba objektum jön létre, ami tartalmazza a hiba tulajdonságait. A hiba kezelése után a
            vezérlés nem tér vissza a hibát kiváltó részhez.</para>
        <para>Annotációk és metaadatok - információt biztosítanak a programról, de nem részei annak,
            nem befolyásolják a kód működését, amelyet annotálnak. Annotációval adhatunk információt
            a fordítóprogram számára, amit például hibakeresésnél hasznosíthat. A Java 5-tel
            kerültek be a nyelvbe. Egy annotációs típus lényegében egy speciális interfésztípus.
            Nevét egy '@' jel előzi meg.</para>
        <para>Egy paradigma jellemzi egy nyelv stíulást, fogalmait, eszközeit, képességeit. A
            paradigmák általában egy adott területen használhatók, viszont kombinált feladatot
            megoldására ezeket kombinálni kell. Az ilyen feladatokhoz használjuk a multiparadigmás
            nyelveket.</para>
        <para>Multiparadigmás programozási nyelv - olyan nyelv, amely kettő vagy több programozási
            paradigmát támogat. Biztosítja, hogy a programozó különböző stílusokban tudjon dolgozni,
            a paradigma elemeit szabadon kombinálja valamint, hogy lehetővé tegye a programozó
            számára, hogy a legjobb eszközt használja egy probléma megoldására. Procedurális
            paradigmát követnek, tehát lépésről lépésre írják le a probléma megoldását.</para>
    </section>
    <section>
        <title>Bevezetés a mobilprogramozásba</title>
        <para> A Python egy általános célú programozási nyelv. Alkotója Guido van Rossum. Leginkább
            prototípus készítésre és tesztelésre szokás alkalmazni. Képes együttműködni más
            nyelveken íródott modulokkal. Elterjedtségét főként az imént említett tulajdonságának,
            valamint a rövid tanulási ciklusnak köszönheti. A Python-ban megírt programok
            terjedelmükben jóval rövidebbek, mint a C, C-ben, C++-ban vagy Java-ban készült, velük
            ekvivalens társaik. A kódok tömörek és könnyen olvashatóak. A kódcsoportosításhoz új
            sort és tabulátort használ (behúzásalapú), nincs szükség nyitó és zárójelekre, nincs
            szükség változó vagy argumentumdefiniálásra. Az utasítások a sorok végéig tartanak,
            nincs szükség ';'-re, ha egy adott utasítást a következő sorban szeretnénk folytatni,
            akkor ezt a '\' jellel tehetjük meg.</para>
        <para>Példa:</para>
        <programlisting language="c++"><![CDATA[
if feltétel1 és feltétel2
    alapfeladat()
egyébfeladat()
]]></programlisting>
        <para>Az értelmező a sorokat tokenekre bontja, amelyek közt tetszőleges üres (whitespace)
            karakter lehet. A tokenek lehetnek: azonosító(változó, osztály, függvénymodul),
            kulccszó, operátor, delimiter, literál.</para>
        <para>Lefoglalt kulcsszavak: and, del, for, is, raise, assert, elif, from, lambda, return,
            break, else, global, not, try, class, except, if, or, while, continue, exec, import,
            pass, yield, def, finally, in, print.</para>
        <para>Típusok</para>
        <para>A Pythonban minden adatot típusok reprezentálna. Az adatokon végezhető műveleteket az
            objektum típusa határozza meg. A változók típusait a rendszer futási időben
            "kitalálja".</para>
        <para>Számok lehetnek:egészek(decimális, oktális, hexadecimális), lebegőpontosak és komplex
            számok.</para>
        <para>Sztringeket aposztrófok közé írva adhatunk meg, illetve a 'u' betű használatával
            Unicode szövegeket is felvehetünk.</para>
        <para>Példa:</para>
        <programlisting language="c++"><![CDATA[
print u"Hello %s, kedves %s!"
]]></programlisting>
        <para>Az ennesek (tuples) objektumok gyűjteményei vesszővel elválasztva.</para>
        <para>Példa:</para>
        <programlisting language="c++"><![CDATA[
('a','b','c') #három elemű ennes
tuple('abc') #tuple generálás kulcsszóval (ugyanaz, mint az előző)
() #üres ennes
(1, "szia", 3,) #három elemű ennes, az utolsó vessző elhagyható
]]></programlisting>
        <para>A lista különbőző típusú elemek rendezett szekvenciája, elemeit szögletes zárójelek
            közé írjuk, dinamikusan nyújtózkodik. Az elemeket az indexükkel azonosítjuk.</para>
        <para>Példa:</para>
        <programlisting language="c++"><![CDATA[
[a','b','c'] #három elemű lista
list('abc') #lista generálás kulcsszóval (ugyanaz, mint az előző)
[] #üres ennes
[1, "szia", 3,] #három elemű lista, az utolsó vessző elhagyható
]]></programlisting>
        <para>A szótár kulcsokkal azonosított elemek rendezetlen halmaza. Kulcs lehet: szám, sztring
            stb. </para>
        <para>Példa:</para>
        <programlisting language="c++"><![CDATA[
{'a':1, 'b':5, 'e':1982}
{1:1, 2:1, } #az utolsó vessző elhagyható
{} #üres szótár
]]></programlisting>
        <para>Változók Pythonban - egyes objektumokra mutató referenciák. Típusaik nincsenek. A
            hozzárendelést az '=' karakterrel végezzük. A del kulcsszóval törölhető a hozzárendelés,
            a mögöttes objektum törlését a garbage collector fogja elvégezni. Léteznek globális és
            lokális változók (akárcsak a C++-ban). A változók közötti típuskonverzió
            támogatott.</para>
        <para>A szekvenciákon (sztringek, listák, ennesek) műveletek végezhetőek el (összefűzés,
            szélsőértékhelyek meghatározása stb).</para>
        <para>Az elágazások és ciklusok működése megegyezik a többi programnyelvével. </para>
        <para>Függvényeket a def kulccszóval definiálunk, tekinthetünk rájuk úgy, mint értékekre,
            mivel továbbadhatóak más függvényeknek illetve objektumkonstruktoroknak.</para>
        <programlisting language="c++"><![CDATA[
def hello();
    print "Hello world!"
    return
]]></programlisting>
        <para> A Python támogatja a klasszikus, objektumorientált fejlesztési eljárásokat
            (osztályokat definiálunk, amelyek példányai az objektumok. Osztályoknak lehetnek
            attribútumaik(objektumok, függvények) illetve örökölhetnek más osztályokból.</para>
        <para>A kivételkezelés:</para>
        <para>Példa</para>
        <programlisting language="c++"><![CDATA[
try:
    utasítások
except [kifejezés]: #akkor fut le,ha az történik, amit a try után leírtunk
[else:
    utasítások]
]]></programlisting>
    </section>
</chapter>                

