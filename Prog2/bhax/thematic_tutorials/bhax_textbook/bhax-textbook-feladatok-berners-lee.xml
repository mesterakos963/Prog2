<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Berner-Lee!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Java és C++ összehasonlítás </title>
        <para> A Java nyelv teljesen objektumorientált. Egy osztály két dologból tevődik össze:
            mezők(adatok tárolása), metódusok(adatokon végezhető műveletek kódja.</para>
        <para>Futtatáshoz szükségünk van egy Java nevű fordítóprogramra. Ez egy bájtkódnak nevezett
            formátumra fordítja le a forráskódot, amelyet majd a Java Virtuális Gép önálló
            interpreterként fog értelmezni. Ez lassabb futást eredményez. A legnagyobb különbség a
            Java illetve a C++ között itt mutatkozik. A C++ kézenfekvőbb, ha olyan programokat
            szeretnénk írni, amelyeknél a futás sebessége elsődleges szempont. A Java inkább a
            web-es téren elterjedt.</para>
        <para>A Java nyelvnek vannak egyszerű típusai is, melyeket az adatok egyszerű
            reprezentálására lehet használni. Ezeknek értéket adni az '=' operátorral lehet.
            Ilyenkor ez valódi értékadást jelent, összetett típusok esetében csak egy referencia
            átmásolását jelenti.</para>
        <para>Eltérés még a C++ és a Java között, hogy Java-ban már 16 bites Unicode karaktereket is
            lehet használni változók vagy konstansok deklarálásához, tehát használhatunk ékezetes
            karaktereket, görög ábécé betűit, stb.</para>
        <para>Megjegyzéseket ugyanúgy adhatunk hozzá a kódhoz, mint a C++ esetében.</para>
        <para>A Java nyelveben semmilyen explicit eszköz nincs egy objektum megszüntetésére,
            egyszerűen nem kell hivatkozni rá és magától meg fog szűnni. Hivatkozás megszüntetéséhez
            az eddigi referencia helyett a null referenciát adjuk neki értékül.</para>
        <para>A Java nyelvben tömböket a [] jelöléssel lehet megadni. A C++-tól eltérően ez egy
            igazi típus lesz és nem csak a mutató típus egy másik megjelenítési formája. A tömb
            típusok nem primitív típusok, a tömb típusú változók objektumhivatkozást tartalmaznak.
            Eltérés még a C++ és a Java között, hogy a Java-ban nincsenek többdimenziós tömbök, erre
            a tömb a tömbben megoldást használja.</para>
        <para>További eltérés még a Goto utasítás teljes hiánya, ez a Java nyelvből kimaradt. </para>
        <para>Java-ban egy objektumot a következő képen példányosítunk. </para>
        <programlisting language="c++"><![CDATA[
#Adott egy objektum
public class Alkalmazott {
String nev; int fiztes;
void fizetesemeles (int novekmeny) {
    fizetes += novekmeny
    }
}
#Példányosítás
Alkalmazott a = new Alkalmazott();
]]></programlisting>
        <para>A new operátor mögött adjuk meg, h melyik osztályt példányosítjuk. A zárójelek közék
            közé az adott esetben a konstruktornak szánt paramétereket írjuk. Csakúgy, mint a
            C++-ban, itt is vannak nyilvános (public) és privát (private) tagok. A private tagokhoz
            az adott osztályon kívül nem férhet hozzá semmi.</para>
        <para>Java megkülönbözteti a referenciát és az imperatív programozási nyelvekben használt
            mutatót aképpen, hogy a kifejezésekben automatikusan a mutatott objektumot jelenti, nem
            pedig a címet.</para>
        <para> </para>
        
    </section>        
        
    <section>
        <title>Bevezetés a mobilprogramozásba</title>
        <para> A Python egy általános célú programozási nyelv. Alkotója Guido van Rossum. Leginkább
            prototípus készítésre és tesztelésre szokás alkalmazni. Képes együttműködni más
            nyelveken íródott modulokkal. Elterjedtségét főként az imént említett tulajdonságának,
            valamint a rövid tanulási ciklusnak köszönheti. A Python-ban megírt programok
            terjedelmükben jóval rövidebbek, mint a C, C-ben, C++-ban vagy Java-ban készült, velük
            ekvivalens társaik. A kódok tömörek és könnyen olvashatóak. A kódcsoportosításhoz új
            sort és tabulátort használ (behúzásalapú), nincs szükség nyitó és zárójelekre, nincs
            szükség változó vagy argumentumdefiniálásra. Az utasítások a sorok végéig tartanak,
            nincs szükség ';'-re, ha egy adott utasítást a következő sorban szeretnénk folytatni,
            akkor ezt a '\' jellel tehetjük meg.</para>
        <para>Példa:</para>
        <programlisting language="c++"><![CDATA[
if feltétel1 és feltétel2
    alapfeladat()
egyébfeladat()
]]></programlisting>
        <para>Az értelmező a sorokat tokenekre bontja, amelyek közt tetszőleges üres (whitespace)
            karakter lehet. A tokenek lehetnek: azonosító(változó, osztály, függvénymodul),
            kulccszó, operátor, delimiter, literál.</para>
        <para>Lefoglalt kulcsszavak: and, del, for, is, raise, assert, elif, from, lambda, return,
            break, else, global, not, try, class, except, if, or, while, continue, exec, import,
            pass, yield, def, finally, in, print.</para>
        <para>Típusok</para>
        <para>A Pythonban minden adatot típusok reprezentálna. Az adatokon végezhető műveleteket az
            objektum típusa határozza meg. A változók típusait a rendszer futási időben
            "kitalálja".</para>
        <para>Számok lehetnek:egészek(decimális, oktális, hexadecimális), lebegőpontosak és komplex
            számok.</para>
        <para>Sztringeket aposztrófok közé írva adhatunk meg, illetve a 'u' betű használatával
            Unicode szövegeket is felvehetünk.</para>
        <para>Példa:</para>
        <programlisting language="c++"><![CDATA[
print u"Hello %s, kedves %s!"
]]></programlisting>
        <para>Az ennesek (tuples) objektumok gyűjteményei vesszővel elválasztva.</para>
        <para>Példa:</para>
        <programlisting language="c++"><![CDATA[
('a','b','c') #három elemű ennes
tuple('abc') #tuple generálás kulcsszóval (ugyanaz, mint az előző)
() #üres ennes
(1, "szia", 3,) #három elemű ennes, az utolsó vessző elhagyható
]]></programlisting>
        <para>A lista különbőző típusú elemek rendezett szekvenciája, elemeit szögletes zárójelek
            közé írjuk, dinamikusan nyújtózkodik. Az elemeket az indexükkel azonosítjuk.</para>
        <para>Példa:</para>
        <programlisting language="c++"><![CDATA[
[a','b','c'] #három elemű lista
list('abc') #lista generálás kulcsszóval (ugyanaz, mint az előző)
[] #üres ennes
[1, "szia", 3,] #három elemű lista, az utolsó vessző elhagyható
]]></programlisting>
        <para>A szótár kulcsokkal azonosított elemek rendezetlen halmaza. Kulcs lehet: szám, sztring
            stb. </para>
        <para>Példa:</para>
        <programlisting language="c++"><![CDATA[
{'a':1, 'b':5, 'e':1982}
{1:1, 2:1, } #az utolsó vessző elhagyható
{} #üres szótár
]]></programlisting>
        <para>Változók Pythonban - egyes objektumokra mutató referenciák. Típusaik nincsenek. A
            hozzárendelést az '=' karakterrel végezzük. A del kulcsszóval törölhető a hozzárendelés,
            a mögöttes objektum törlését a garbage collector fogja elvégezni. Léteznek globális és
            lokális változók (akárcsak a C++-ban). A változók közötti típuskonverzió
            támogatott.</para>
        <para>A szekvenciákon (sztringek, listák, ennesek) műveletek végezhetőek el (összefűzés,
            szélsőértékhelyek meghatározása stb).</para>
        <para>Az elágazások és ciklusok működése megegyezik a többi programnyelvével. </para>
        <para>Függvényeket a def kulccszóval definiálunk, tekinthetünk rájuk úgy, mint értékekre,
            mivel továbbadhatóak más függvényeknek illetve objektumkonstruktoroknak.</para>
        <programlisting language="c++"><![CDATA[
def hello();
    print "Hello world!"
    return
]]></programlisting>
        <para> A Python támogatja a klasszikus, objektumorientált fejlesztési eljárásokat
            (osztályokat definiálunk, amelyek példányai az objektumok. Osztályoknak lehetnek
            attribútumaik(objektumok, függvények) illetve örökölhetnek más osztályokból.</para>
        <para>A kivételkezelés:</para>
        <para>Példa</para>
        <programlisting language="c++"><![CDATA[
try:
    utasítások
except [kifejezés]: #akkor fut le,ha az történik, amit a try után leírtunk
[else:
    utasítások]
]]></programlisting>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
        <para>
            A biomorfok szoros kapcsolatban állnak a Mandelbrot halmazzal. Itt is létrehozunk egy make file-t és futtatjuk a programot, ami létrehoz egy bmorf.png képet az előzőhöz hasonló módon, de mivel az egyenletünk más ebből egyértelműen következik, hogy a kapott ábra is másogy fog kinézni. A formán kívül azonban az is szembeötlik, hogy ez az ábra már színes. Ezt úgy kapjuk meg, hogy az iteráció számát elosztjuk 255-tel, így RGB színezést kapunk.
        </para>
        <para>Kimenet: <link xlink:href="https://github.com/mesterakos963/Prog1/blob/master/bmorf.png">https://github.com/mesterakos963/Prog1/blob/master/bmorf.png</link></para>                        
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>  
        <para>
            Megoldás forrása:  
        </para>
        <programlisting language="c++">
<![CDATA[
        // frakablak.cpp
//
// Mandelbrot halmaz nagyító

#include "frakablak.h"

FrakAblak::FrakAblak(double a, double b, double c, double d,
                     int szelesseg, int iteraciosHatar, QWidget *parent)
                         : QMainWindow(parent)
{
    setWindowTitle("Mandelbrot halmaz");

    szamitasFut = true;
    x = y = mx = my = 0;
    this->a = a;
    this->b = b;
    this->c = c;
    this->d = d;
    this->szelesseg = szelesseg;
    this->iteraciosHatar = iteraciosHatar;
    magassag = (int)(szelesseg * ((d-c)/(b-a)));

    setFixedSize(QSize(szelesseg, magassag));
    fraktal= new QImage(szelesseg, magassag, QImage::Format_RGB32);

    mandelbrot = new FrakSzal(a, b, c, d, szelesseg, magassag, iteraciosHatar, this);
    mandelbrot->start();
}

FrakAblak::~FrakAblak()
{
    delete fraktal;
    delete mandelbrot;
}

void FrakAblak::paintEvent(QPaintEvent*) {
    QPainter qpainter(this);
    qpainter.drawImage(0, 0, *fraktal);
    if(!szamitasFut) {
        qpainter.setPen(QPen(Qt::white, 1));
        qpainter.drawRect(x, y, mx, my);

    }
    qpainter.end();
}

void FrakAblak::mousePressEvent(QMouseEvent* event) {

    // A nagyítandó kijelölt területet bal felsõ sarka:
    x = event->x();
    y = event->y();
    mx = 0;
    my = 0;

    update();
}

void FrakAblak::mouseMoveEvent(QMouseEvent* event) {

    // A nagyítandó kijelölt terület szélessége és magassága:
    mx = event->x() - x;
    my = mx; // négyzet alakú

    update();
}

void FrakAblak::mouseReleaseEvent(QMouseEvent* event) {

    if(szamitasFut)
        return;

    szamitasFut = true;

    double dx = (b-a)/szelesseg;
    double dy = (d-c)/magassag;

    double a = this->a+x*dx;
    double b = this->a+x*dx+mx*dx;
    double c = this->d-y*dy-my*dy;
    double d = this->d-y*dy;

    this->a = a;
    this->b = b;
    this->c = c;
    this->d = d;

    delete mandelbrot;
    mandelbrot = new FrakSzal(a, b, c, d, szelesseg, magassag, iteraciosHatar, this);
    mandelbrot->start();

    update();
}

void FrakAblak::keyPressEvent(QKeyEvent *event)
{

    if(szamitasFut)
        return;

    if (event->key() == Qt::Key_N)
        iteraciosHatar *= 2;
    szamitasFut = true;

    delete mandelbrot;
    mandelbrot = new FrakSzal(a, b, c, d, szelesseg, magassag, iteraciosHatar, this);
    mandelbrot->start();

}


void FrakAblak::vissza(int magassag, int *sor, int meret)
{
    for(int i=0; i<meret; ++i) {
        QRgb szin = qRgb(0, 255-sor[i], 0);
        fraktal->setPixel(i, magassag, szin);
    }
    update();
}

void FrakAblak::vissza(void)
{
    szamitasFut = false;
    x = y = mx = my = 0;
}
]]>
</programlisting>
<para>
    Ehhez a feladathoz a QT Creator nevű progamot használjuk, mely egy multiplatform GUI építő szoftver.
</para>
        <para>
            A már meglévő Mandelbrot-halmaz kódhoz építünk felhasználói felületet. Használatához kijelöljük az újragenerálandó területet, ezzel érjük el a nagyítást.
        </para>
        <para>
            A szükséges kiegészítő kódok itt találhatóak: <link xlink:href="https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/Qt/Frak/">https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/Qt/Frak/</link>
        </para>
    </section>                     
                                                                                                                                                                               
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
            Ehhez a feladathoz az OpenJFX 11 nevű szoftvert használni, ami a QT-hoz hasonló GUI építő szoftver.  
        </para>
        <para>
            A Mandelbrot nagyító és utazó JAVA nyelvű megvalósítása itt található: <link xlink:href="https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/Qt/Frak/">https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/Qt/Frak/</link>
        </para>
    </section>

</chapter>                

