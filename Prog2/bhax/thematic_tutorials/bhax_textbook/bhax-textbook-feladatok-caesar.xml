<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>double ***</type> háromszögmátrix</title>
        <para>
           
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
                <programlisting language="c++">
<![CDATA[
 #include <stdio.h>
#include <stdlib.h>

int
main ()
{
    int nr = 5;
    double **tm;
    
    printf("%p\n", &tm);
    
    if ((tm = (double **) malloc (nr * sizeof (double *))) == NULL)
    {
        return -1;
    }

    printf("%p\n", tm);
    
    for (int i = 0; i < nr; ++i)
    {
        if ((tm[i] = (double *) malloc ((i + 1) * sizeof (double))) == NULL)
        {
            return -1;
        }

    }

    printf("%p\n", tm[0]);    
    
    for (int i = 0; i < nr; ++i)
        for (int j = 0; j < i + 1; ++j)
            tm[i][j] = i * (i + 1) / 2 + j;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    tm[3][0] = 42.0;
    (*(tm + 3))[1] = 43.0;	// mi van, ha itt hiányzik a külső ()
    *(tm[3] + 2) = 44.0;
    *(*(tm + 3) + 3) = 45.0;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    for (int i = 0; i < nr; ++i)
        free (tm[i]);

    free (tm);

    return 0;
}
]]>
        </programlisting>
        <para>
            Ez a feladat a C egyik funkciójára világít rá, ami a dinamikus memóriakezelés. Létrehozunk egy háromszögmátrixot <code>matrix **</code>, amit a fordítónak hála más módon is leírhatunk, így nem kell foglalkozni a mutató- és címaritmetikával foglalkozni. 
        </para> 
        <para>
            A kód elején megadjuk a kétdimenziós tömb méretét, majd lefoglaljuk a memóriában a helyet a háromszögmátrixhoz (<code>matrix</code>), majd lefoglalunk a sorok számával megegyező számú tömböt, amik szintén tartalmazni fognak az oszlopok számával megegyező számú tömböt.
        </para>
        <para>
        <link xlink:href="https://github.com/mesterakos963/Prog1/blob/master/doublecscs.png">https://github.com/mesterakos963/Prog1/blob/master/doublecscs.png</link>
        </para>
        <para>
            Kimenetként a következőt kapjuk:
        </para>
        <screen>
            <![CDATA[$
            Mutato cime: 0x7fffbc435de0
            Sorok tombjenek cime: 0x5567bca69670
            Elso sor cime: 0x5567bca696a0
            |1.00  0.00  0.00  0.00  0.00  |
            |2.00  1.00  0.00  0.00  0.00  |
            |3.00  1.00  1.00  0.00  0.00  |
            |4.00  2.00  1.00  1.00  0.00  |
            |5.00  2.00  1.00  1.00  1.00  |]]>
        </screen>
        <para>
            Láthatjuk, hogy a kapott mátrixunk felső háromszög alakú, ami azt jelenti, hogy a főátló fölötti értékek mindegyike 0-val egyenlő. 
        </para>           
    </section>        
    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:
              <programlisting language="c++">
<![CDATA[
#define MAX_KEY_SIZE 100
#define BUFFER_SIZE 256

char key[MAX_KEY_SIZE];
char buffer[BUFFER_SIZE];

int key_index = 0, read_bytes = 0;
int key_size = strlen(argv[1]);

strncpy(key, argv[1], MAX_KEY_SIZE);

while ((read_bytes = read(0, (void *)buffer, BUFFER_SIZE))) {
	for (int i = 0; i < read_bytes; i++) {
		buffer[i] ^= key[key_index];
		key_index = (key_index + 1) % key_size;
	}

	write(1, buffer, read_bytes);
}
]]>
        </programlisting>             
        </para>
        <para>
            Ez egy elég egyszerű titkosító program. A bemeneten érkező szövegen karakterenként végi el a XOR utasítást, majd a kapott titkosított szöveget kiírja fájlba vagy a standard kimenetre, de a működéshez szükség van a kulcsra.
        </para>
        <para>
            A kód elején definiáljuk a kulcs maximum hosszát, valamit a buffer méretét, aztán ezeket az értékeket használjuk fel a key valamint a buffer karakterláncok méretének megadásához.
        </para>
        <para>
            A két egymásba ágyazott ciklus hivatott arra, hogy a bemenetet addig olvassuk, ameddig az tart, valamint rögtön törjük ^(XOR) operátorral.
        </para>            
        <para>
            Mivel a bemenetet a key tömb key_indexe-edik eleme szerint törjük, csak a megfelelő kulcs segítségével kapunk jó kimenetet, egyébként a kapott kódolt szöveg dekódolhatatlan lesz.
        </para>
    </section>        
    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <programlisting language="c++">
<![CDATA[
import java.util.*;

class XorEncode {
	public static void main(String[] args) {
		String kulcs = "";

		if(args.length > 0) {
			kulcs = args[0];
		} else {
			System.out.println("Kulcs nelkul nem titkositok!");
			System.out.println("Hasznalat: java XorEncode.java [kulcs]");
			System.exit(-1);
		}

		Scanner sc = new Scanner(System.in);
		String str = "";

		while(sc.hasNext()) {
			str = sc.next();
			System.out.println(xor(kulcs, str));
		}
	}

	public static String xor(String kulcs, String s) {
		StringBuilder sb = new StringBuilder();

		for(int i = 0; i < s.length(); i++) {
			sb.append((char)(s.charAt(i) ^ kulcs.charAt(i % kulcs.length())));
		}

		return sb.toString();
	}
}
]]>
        </programlisting>  
        <para>
           A program ugyúgy működik, mint a C-s változata. Az argumentumok közül kiolvassa a kulcsot majd a bemeneten érkező szövegen végrehajtjuk a XOR utasítást, a kimenetet pedig egy szöveges fájlba tesszük. A Java a C-vel szemben egy objektum orientált programozási nyelv, nincs benne memóriakezelés, ami miatt jóval egyszerűbb, viszont szintaxisban vannak hasonlóságok a C-vel.
        </para>            
    </section>        
    <section>
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:
<programlisting language="c++">
<![CDATA[
#define MAX_TITKOS 4096
#define OLVASAS_BUFFER 256
#define KULCS_MERET 8
#define _GNU_SOURCE

#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>

double atlagos_szohossz(const char *titkos, int titkos_meret);
int tiszta_lehet(const char *titkos, int titkos_meret);
void exor(const char kulcs[], int kulcs_meret, char titkos[],
	  int titkos_meret, char *buffer);
void exor_tores(const char kulcs[], int kulcs_meret, char titkos[],
		int titkos_meret);

int main(void)
{
	char titkos[MAX_TITKOS];
	char *p = titkos;
	char *kulcs;

	// titkos fajt berantasa
	int olvasott_bajtok;
	while ((olvasott_bajtok =
		read(0, (void *)p,
		     (p - titkos + OLVASAS_BUFFER <
		      MAX_TITKOS) ? OLVASAS_BUFFER : titkos +
		     MAX_TITKOS - p)))
		p += olvasott_bajtok;

	// maradek hely nullazasa a titkos bufferben
	for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
		titkos[p - titkos + i] = '\0';

	int ii, ki, ji, li, mi, ni, oi, pi;

#pragma omp parallel for private(kulcs, ii, ki, ji, li, mi, ni, oi, pi) shared(p, titkos)
	// osszes kulcs eloallitasa
	for (ii = '0'; ii <= '9'; ++ii)
		for (ji = '0'; ji <= '9'; ++ji)
			for (ki = '0'; ki <= '9'; ++ki)
				for (li = '0'; li <= '9'; ++li)
					for (mi = '0'; mi <= '9';
					     ++mi)
						for (ni = '0';
						     ni <= '9'; ++ni)
							for (oi = '0';
							     oi <=
							     '9';
							     ++oi)
								for (pi = '0'; pi <= '9'; ++pi) {
									if ((kulcs = (char *)malloc(sizeof(char) * KULCS_MERET)) == NULL) {
										printf
										    ("Memoria (kulcs) faliora\n");
										exit(-1);
									}

									kulcs
									    [0]
									    =
									    ii;
									kulcs
									    [1]
									    =
									    ji;
									kulcs
									    [2]
									    =
									    ki;
									kulcs
									    [3]
									    =
									    li;
									kulcs
									    [4]
									    =
									    mi;
									kulcs
									    [5]
									    =
									    ni;
									kulcs
									    [6]
									    =
									    oi;
									kulcs
									    [7]
									    =
									    pi;

									exor_tores
									    (kulcs,
									     KULCS_MERET,
									     titkos,
									     p
									     -
									     titkos);
								}

	return 0;
}

double atlagos_szohossz(const char *titkos, int titkos_meret)
{
	int sz = 0;
	for (int i = 0; i < titkos_meret; ++i) {
		if (titkos[i] == ' ') {
			++sz;
		}
	}

	return (double)titkos_meret / sz;
}

int tiszta_lehet(const char *titkos, int titkos_meret)
{
	// a tiszta szoveg valszeg tartalmazza a gyakori magyar szavakat
	// illetve az átlagos szóhossz vizsgálatával csökkentjük a
	// potenciális töréseket

	double szohossz = atlagos_szohossz(titkos, titkos_meret);

	return szohossz > 3.0 && szohossz < 9.0
	    && strcasestr(titkos, "hogy") && strcasestr(titkos, "nem")
	    && strcasestr(titkos, "ne")
	    && strcasestr(titkos, "az") && strcasestr(titkos, "ha");
}

void exor(const char kulcs[], int kulcs_meret, char titkos[],
	  int titkos_meret, char *buffer)
{
	int kulcs_index = 0;
	for (int i = 0; i < titkos_meret; ++i) {
		buffer[i] = titkos[i] ^ kulcs[kulcs_index];
		kulcs_index = (kulcs_index + 1) % kulcs_meret;
	}
}

void exor_tores(const char kulcs[], int kulcs_meret, char titkos[],
		int titkos_meret)
{
	char *buffer;

	if ((buffer =
	     (char *)malloc(sizeof(char) * titkos_meret)) == NULL) {
		printf("Memoria (buffer) faliora\n");
		exit(-1);
	}

	exor(kulcs, kulcs_meret, titkos, titkos_meret, buffer);

	if (tiszta_lehet(buffer, titkos_meret)) {
		printf
		    ("Kulcs: [%c%c%c%c%c%c%c%c]\nTiszta szoveg: [%s]\n",
		     kulcs[0], kulcs[1], kulcs[2], kulcs[3], kulcs[4],
		     kulcs[5], kulcs[6], kulcs[7], buffer);
	}

	free(buffer);
}       
]]>
        </programlisting>           
        </para>
        <para>
            Ez a program egy bruteforce algoritmus segítségével fejti vissza a 4.2-es feladat után kapott kódolt szöveget. Mivel ez egy hosszú folyamat, ezért a minél gyorsabb futás érdekében használjuk az OpenMP-t. A bemenetről olvasott szavak hosszának vizsgálása után a keresi a leggyakoribb magyar szavakat és kiírja őket kimenetre.
        </para>
        <para>
            A bemenetet olvasva a szavak hosszának vizsgálata után keresi a leggyakoribb magyar szavakat, amennyiben a szó hossza megfelel egy bizonyos értékhatárnak. Ha talál ilyen szavakat, azt kiírja kimenetre. (meg, van, vagy, és, volt, már, hogy, stb). 
        </para>            
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            R
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Koyw6IH5ScQ">https://youtu.be/Koyw6IH5ScQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R</link>               
        </para>
        <para>
            Ebben a feladatban egy neurális hálót építünk fel, ami úgy működik, hogy megadjuk neki, hogy milyen bemenetre milyen kimenetet adjon vissza majd ő ezt megpróbálja mesterségesen utánozni. A program futtatásakor a kimenetről a kimenetet vizualizálva kapjuk meg. A programnak 149 lépés alatt sikerült megtanulnia a neurális hálónkat az OR utasításra. A matematikai számításokat a neuralnet nevű könyvtár végezte.
        </para>           
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>

  
        <programlisting language="c++">
<![CDATA[
#include "ml.hpp"

#include <iostream>
#include <png++/png.hpp>

int main(int argc, char **argv) {
	png::image<png::rgb_pixel> image(argv[1]);

	int size = image.get_width() * image.get_height();

	Perceptron *p = new Perceptron(3, size, 256, 1);

	double *image_d = new double[size];

	for(int i = 0; i < image.get_width(); i++)
		for(int j = 0; j < image.get_height(); j++)
			image_d[i*image.get_width() + j] = image[i][j].red;

	double value = (*p)(image_d);

	std::cout << value << std::endl;

	delete p;
	delete[] image_d;

	return 0;
}
]]>
        </programlisting>
        <para>
            A program kódja viszonylag egyszerű, nem tartalmaz semmiféle trükköt. A mandelbrot feladat által generált png-t vizsgálja pixelről pixelre és számolja a piros színű pixeleket, kimenetként pedig megkapjuk, hogy az adott képnek hány százalékát alkotják piros pixelek. 
        </para>            
    </section>        
        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
</chapter>                
